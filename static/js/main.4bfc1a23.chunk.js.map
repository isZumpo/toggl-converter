{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCsvFile","bind","assertThisInitialized","timeStampToStupidFormat","getFormatedEntries","state","entries","react_default","a","createElement","className","react_csv_reader_default","cssClass","onFileLoaded","inputId","inputStyle","color","value","style","width","height","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","entry","description","date","start","toFixed","replace","end","err","return","timeStamp","time","split","parseFloat","csvFile","shift","pop","convertedEntries","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","push","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAqEeA,qBA/Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,cAAgBP,EAAKO,cAAcC,KAAnBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACrBA,EAAKU,wBAA0BV,EAAKU,wBAAwBF,KAA7BP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC/BA,EAAKW,mBAAqBX,EAAKW,mBAAmBH,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAE1BA,EAAKY,MAAQ,CACXC,QAAS,IAPMb,wEAYjB,OACEc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,SAAS,mBACTC,aAAcjB,KAAKI,cACnBc,QAAQ,SACRC,WAAY,CAAEC,MAAO,SAEvBT,EAAAC,EAAAC,cAAA,YAAUQ,MAAOrB,KAAKQ,qBAAsBc,MAAO,CAAEC,MAAO,MAAOC,OAAQ,WAC3Eb,EAAAC,EAAAC,cAAA,mPAQJ,IAAIH,EAAU,GADKe,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEnB,QAAAC,EAAAC,EAAkB9B,KAAKS,MAAMC,QAA7BqB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAsC,KAA7BU,EAA6BN,EAAAR,MACpCX,GAAWyB,EAAMC,YAAc,KAAOD,EAAME,KAAO,KAAOF,EAAMG,MAAMC,QAAQ,GAAGC,QAAQ,IAAK,KAAO,KAAOL,EAAMM,IAAIF,QAAQ,GAAGC,QAAQ,IAAK,KAAO,MAHpI,MAAAE,GAAAhB,GAAA,EAAAC,EAAAe,EAAA,YAAAjB,GAAA,MAAAK,EAAAa,QAAAb,EAAAa,SAAA,WAAAjB,EAAA,MAAAC,GAKnB,OAAOjB,kDAGekC,GACtB,IAAIC,EAAOD,EAAUE,MAAM,KAI3B,OAHWC,WAAWF,EAAK,KACbE,WAAWF,EAAK,IAChBE,WAAWF,EAAK,IACK,IAAM,yCAG7BG,GAEZA,EAAQC,QACRD,EAAQE,MAER,IAAIC,EAAmB,GALFC,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAMrB,QAAA2B,EAAAC,EAAkBR,EAAlBjB,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAA2B,KAAlBjB,EAAkBoB,EAAAlC,MACzB8B,EAAiBM,KAAK,CACpBrB,YAAaD,EAAM,GACnBE,KAAMF,EAAM,GACZG,MAAOtC,KAAKO,wBAAwB4B,EAAM,IAC1CM,IAAKzC,KAAKO,wBAAwB4B,EAAM,QAXvB,MAAAO,GAAAW,GAAA,EAAAC,EAAAZ,EAAA,YAAAU,GAAA,MAAAI,EAAAb,QAAAa,EAAAb,SAAA,WAAAU,EAAA,MAAAC,GAcrBtD,KAAK0D,SAAS,CAAEhD,QAASyC,WA5DXQ,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4bfc1a23.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport CSVReader from 'react-csv-reader'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleCsvFile = this.handleCsvFile.bind(this)\n    this.timeStampToStupidFormat = this.timeStampToStupidFormat.bind(this)\n    this.getFormatedEntries = this.getFormatedEntries.bind(this)\n\n    this.state = {\n      entries: []\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Convert toggl csv to log format</h1>\n        <CSVReader\n          cssClass=\"csv-reader-input\"\n          onFileLoaded={this.handleCsvFile}\n          inputId=\"ObiWan\"\n          inputStyle={{ color: 'red' }}\n        />\n        <textarea value={this.getFormatedEntries()} style={{ width: \"50%\", height: \"400px\" }}></textarea >\n        <div>\n          A CSV file from toggl is generated by going to reports, then detailed. Filter for the correct course(project), then click the download button in the top right corner to download CSV.\n        </div>\n      </div>\n    );\n  }\n\n  getFormatedEntries() {\n    let entries = \"\"\n    for (let entry of this.state.entries) {\n      entries += entry.description + \"\\t\" + entry.date + \"\\t\" + entry.start.toFixed(5).replace(\".\", \",\") + \"\\t\" + entry.end.toFixed(5).replace(\".\", \",\") + \"\\n\"\n    }\n    return entries\n  }\n\n  timeStampToStupidFormat(timeStamp) {\n    let time = timeStamp.split(\":\")\n    let hour = parseFloat(time[0])\n    let minutes = parseFloat(time[1])\n    let seconds = parseFloat(time[2])\n    return hour + (minutes + seconds / 60) / 60\n  }\n\n  handleCsvFile(csvFile) {\n    // Remove first row containing labels, and last row which is empty\n    csvFile.shift()\n    csvFile.pop()\n\n    let convertedEntries = []\n    for (let entry of csvFile) {\n      convertedEntries.push({\n        description: entry[5],\n        date: entry[7],\n        start: this.timeStampToStupidFormat(entry[8]),\n        end: this.timeStampToStupidFormat(entry[10])\n      })\n    }\n    this.setState({ entries: convertedEntries })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}